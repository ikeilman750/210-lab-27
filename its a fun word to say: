#include <iostream>
#include <map>
#include <tuple>
#include <string>
#include <algorithm>
using namespace std;

void displayVillagers(const map<string, tuple<int, string, string>>& villagers) {
    cout << "\nVillager details:\n";
    for (const auto& [name, details] : villagers) {
        auto  [friendship, species, catchphrase] = details;
        cout << name << " [" << friendship << ", " << species << ", " << catchphrase << "]\n";
    }
}

void addVillager(map<string, tuple<int, string, string>>& villagers) {
    string name, species, catchphrase;
    int friendship;

    cout << "Villager name: ";
    cin >> name;
    cout << "Friendship level (0 - 10):  ";
    cin >> friendship;
    cout << "Species: ";
    cin.ignore();
    getline(cin, species );
    cout << "Catchphrase : ";
    getline(cin, catchphrase);

    villagers[name] = make_tuple(friendship, species, catchphrase);
    cout << name << " added.\n";
}

void deleteVillager(map<string, tuple<int, string, string>>& villagers) {
    string name;
    cout << "Enter the name of the villager to delete: ";
    cin >> name;
    if (villagers.erase(name)) {
        cout << name << " deleted.\n";
    } else {
        cout << name << " not found.\n";
    }
}

void modifyFriendship(map<string, tuple<int, string, string>>& villagers, bool increase) {
    string name;
    cout << "Enter  villager name ";
    cin >> name;
    auto it = villagers.find(name);
    if (it != villagers.end()) {
        auto& [friendship, species, catchphrase] = it->second;
        if (increase) {
            friendship = min(friendship + 1, 10);
        } else {
            friendship = max(friendship - 1, 0);
        }             
        cout << "Friendship level for " << name << " is now " << friendship << ".\n";
    } else {
        cout << name << " not found.\n";
    }
}

void searchVillager(const map<string, tuple<int, string, string>>& villagers) {
    string name;
    cout << "Enter villager name to search: ";
    cin >> name;
     auto it = villagers.find(name);
    if (it != villagers.end()) {
        auto [friendship, species, catchphrase] = it->second;
        cout << "Found " << name << ": [" << friendship << ", " << species << ", " << catchphrase << "]\n";
    } else {
        cout << name << " not found.\n";
    }
}

int main() {
     map<string, tuple<int, string, string>> villagers;
    int choice;

    do {
        cout << "\nMenu:\n"
             << "1. Add Villager\n"
             << "2. Delete Villager\n"
             << "3. Increase Friendship\n"
             << "4. Decrease Friendship\n"
             << "5. Search for Villager\n"
             << "6. Exit\n"   
             << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addVillager(villagers);
                break;
            case 2:
                deleteVillager(villagers);
                break;
            case 3:
                modifyFriendship(villagers, true);
                break;
            case 4:
                modifyFriendship(villagers, false);
                break;
            case 5:
                searchVillager(villagers);
                break;
            case 6:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice, please try again.\n";
        }

        if (choice != 6) {
            displayVillagers(villagers);
        }

    } while (choice !=6);

    return 0;
}
